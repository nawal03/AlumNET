CREATE OR REPLACE PROCEDURE ADD_BLOG(
    B_USER_ID IN BLOGS.USER_ID%TYPE,
    B_TOPIC IN BLOGS.TOPIC%TYPE,
    B_TITLE IN BLOGS.TITLE%TYPE,
    B_DESCRIPTION IN  BLOGS.DESCRIPTION%TYPE,
    RESULT OUT VARCHAR2
) IS
    B_POST_ID BLOGS.POST_ID%TYPE;
BEGIN
    B_POST_ID := POST_SEQ.NEXTVAL;
    INSERT INTO
        POSTS(POST_ID, POST_TYPE)
    VALUES (B_POST_ID, 'blog');

    INSERT INTO BLOGS(POST_ID, USER_ID, TOPIC, TITLE, DESCRIPTION)
    VALUES (B_POST_ID, B_USER_ID, UPPER(B_TOPIC), B_TITLE, B_DESCRIPTION);
    RESULT := 'Blog is added';

EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;



CREATE OR REPLACE PROCEDURE UPDATE_BLOG(
    B_POST_ID IN BLOGS.POST_ID%TYPE,
    B_TOPIC IN BLOGS.TOPIC%TYPE,
    B_TITLE IN BLOGS.TITLE%TYPE,
    B_DESCRIPTION IN  BLOGS.DESCRIPTION%TYPE,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE BLOGS
        SET
            TOPIC = UPPER(B_TOPIC),
            TITLE = B_TITLE,
            DESCRIPTION = B_DESCRIPTION
    WHERE POST_ID = B_POST_ID;
    RESULT := 'Update is successful';
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;


CREATE OR REPLACE PROCEDURE ADD_GROUP_POST(
    GP_USER_ID IN NUMBER,
    GP_GROUP_ID IN NUMBER,
    GP_TOPIC IN GROUP_POSTS.TOPIC%TYPE,
    GP_DESCRIPTION IN  GROUP_POSTS.DESCRIPTION%TYPE,
    RESULT OUT VARCHAR2
) IS
    GP_GROUP_MEMBER_ID GROUP_POSTS.GROUP_MEMBER_ID%TYPE;
    GP_POST_ID GROUP_POSTS.POST_ID%TYPE;
BEGIN
    GP_POST_ID := POST_SEQ.NEXTVAL;
    INSERT INTO
        POSTS(POST_ID, POST_TYPE)
    VALUES (GP_POST_ID, 'group_post');

    SELECT GROUP_MEMBER_ID INTO GP_GROUP_MEMBER_ID
    FROM GROUP_MEMBERS
    WHERE GROUP_ID = GP_GROUP_ID AND USER_ID = GP_USER_ID;

    INSERT INTO GROUP_POSTS(POST_ID, GROUP_MEMBER_ID, TOPIC, DESCRIPTION)
    VALUES (GP_POST_ID, GP_GROUP_MEMBER_ID, UPPER(GP_TOPIC), GP_DESCRIPTION);
    RESULT := 'Group post is added';

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RESULT := 'No such group member';
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;

CREATE OR REPLACE PROCEDURE UPDATE_GROUP_POST(
    GP_POST_ID IN GROUP_POSTS.POST_ID%TYPE,
    GP_TOPIC IN GROUP_POSTS.TOPIC%TYPE,
    GP_DESCRIPTION IN  GROUP_POSTS.DESCRIPTION%TYPE,
    RESULT OUT CLOB
) IS
BEGIN
    UPDATE GROUP_POSTS
        SET
            TOPIC = UPPER(GP_TOPIC),
            DESCRIPTION = GP_DESCRIPTION
    WHERE POST_ID = GP_POST_ID;
    RESULT := 'Update is successful';
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;

create OR REPLACE PROCEDURE ADD_JOB_POST(
    JP_USER_ID IN JOB_POSTS.USER_ID%TYPE,
    JP_COMPANY_NAME IN JOB_POSTS.COMPANY_NAME%TYPE,
    JP_JOB_TYPE IN JOB_POSTS.JOB_TYPE%TYPE,
    JP_REMOTE IN  JOB_POSTS.REMOTE%TYPE,
		JP_LATITUDE IN  JOB_POSTS.LATITUDE%TYPE,
		JP_LONGITUDE IN  JOB_POSTS.LONGITUDE%TYPE,
		JP_REQUIREMENTS IN  JOB_POSTS.REQUIREMENTS%TYPE,
    JP_DESIGNATION IN  JOB_POSTS.DESIGNATION%TYPE,
		JP_EXPECTED_SALARY IN  JOB_POSTS.EXPECTED_SALARY%TYPE,
		JP_VACANCY IN  JOB_POSTS.VACANCY%TYPE,
		JP_EMAIL IN  JOB_POSTS.EMAIL%TYPE,
		JP_PHONE_NO IN  JOB_POSTS.PHONE_NO%TYPE,
		RESULT OUT VARCHAR2
) IS
    JP_POST_ID JOB_POSTS.POST_ID%TYPE;
BEGIN
    JP_POST_ID := POST_SEQ.NEXTVAL;
    INSERT INTO
        POSTS(POST_ID, POST_TYPE)
    VALUES (JP_POST_ID, 'job_post');

    INSERT INTO JOB_POSTS(POST_ID, USER_ID, COMPANY_NAME, JOB_TYPE, REMOTE, LATITUDE, LONGITUDE, REQUIREMENTS, DESIGNATION, EXPECTED_SALARY, VACANCY, EMAIL, PHONE_NO)
    VALUES (JP_POST_ID, JP_USER_ID, UPPER(JP_COMPANY_NAME), JP_JOB_TYPE, JP_REMOTE, JP_LATITUDE, JP_LONGITUDE, JP_REQUIREMENTS, JP_DESIGNATION, JP_EXPECTED_SALARY, JP_VACANCY, JP_EMAIL, JP_PHONE_NO);
    RESULT := 'Job post is added';

EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;

create OR REPLACE PROCEDURE UPDATE_JOB_POST(
    JP_POST_ID IN JOB_POSTS.POST_ID%TYPE,
    JP_COMPANY_NAME IN JOB_POSTS.COMPANY_NAME%TYPE,
    JP_JOB_TYPE IN JOB_POSTS.JOB_TYPE%TYPE,
    JP_REMOTE IN  JOB_POSTS.REMOTE%TYPE,
		JP_LATITUDE IN  JOB_POSTS.LATITUDE%TYPE,
		JP_LONGITUDE IN  JOB_POSTS.LONGITUDE%TYPE,
		JP_REQUIREMENTS IN  JOB_POSTS.REQUIREMENTS%TYPE,
    JP_DESIGNATION IN  JOB_POSTS.DESIGNATION%TYPE,
		JP_EXPECTED_SALARY IN  JOB_POSTS.EXPECTED_SALARY%TYPE,
		JP_VACANCY IN  JOB_POSTS.VACANCY%TYPE,
		JP_EMAIL IN  JOB_POSTS.EMAIL%TYPE,
		JP_PHONE_NO IN  JOB_POSTS.PHONE_NO%TYPE,
		RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE JOB_POSTS
        SET
            COMPANY_NAME = UPPER(JP_COMPANY_NAME),
            JOB_TYPE = JP_JOB_TYPE,
						REMOTE = JP_REMOTE,
						LATITUDE = JP_LATITUDE,
						LONGITUDE = JP_LONGITUDE,
						REQUIREMENTS = JP_REQUIREMENTS,
						DESIGNATION = JP_DESIGNATION,
						EXPECTED_SALARY = JP_EXPECTED_SALARY,
						VACANCY = JP_VACANCY,
						EMAIL = JP_EMAIL,
						PHONE_NO = JP_PHONE_NO
    WHERE POST_ID = JP_POST_ID;
    RESULT := 'Update is successful';
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;

CREATE OR REPLACE PROCEDURE CREATE_CV(
    U_USER_ID IN USERS.USER_ID%TYPE,
    RESULT OUT VARCHAR2
) IS
    U_NAME VARCHAR2(1000);
    U_GENDER USERS.GENDER%TYPE;
    U_BATCH USERS.BATCH%TYPE;
    U_DEPARTMENT USERS.DEPARTMENT%TYPE;
    U_ADDRESS VARCHAR2(1000);
    U_EMAIL USERS.EMAIL%TYPE;
    WORK_EXPERIENCE_COUNT NUMBER;
    EDUCATION_COUNT NUMBER;
    PUBLICATION_COUNT NUMBER;
    ACHIEVEMENT_COUNT NUMBER;
    RESEARCH_INTEREST_COUNT NUMBER;
    SKILL_COUNT NUMBER;
    INTEREST_COUNT NUMBER;
    i NUMBER;
BEGIN
    SELECT FIRST_NAME || ' ' || LAST_NAME INTO U_NAME
    FROM USERS
    WHERE USER_ID = U_USER_ID;

    SELECT FIRST_NAME || ' ' || LAST_NAME INTO U_NAME
    FROM USERS
    WHERE USER_ID = U_USER_ID;

    SELECT GENDER INTO U_GENDER
    FROM USERS
    WHERE USER_ID = U_USER_ID;

    SELECT BATCH INTO U_BATCH
    FROM USERS
    WHERE USER_ID = U_USER_ID;

    SELECT DEPARTMENT INTO U_DEPARTMENT
    FROM USERS
    WHERE USER_ID = U_USER_ID;

    SELECT USERS.CITY || ', ' || COUNTRY INTO U_ADDRESS
    FROM USERS
    WHERE USER_ID = U_USER_ID;

    SELECT EMAIL INTO U_EMAIL
    FROM USERS
    WHERE USER_ID = U_USER_ID;

    RESULT := '---PERSONAL INFO---' || chr(10);
    RESULT := RESULT || 'Name : ' || U_NAME || chr(10);
    RESULT := RESULT || 'Email : ' || U_EMAIL || chr(10);
    RESULT := RESULT || 'Department : ' || U_DEPARTMENT || chr(10);
    RESULT := RESULT || 'Batch : ' || U_BATCH || chr(10);
    RESULT := RESULT || 'Gender : ' || U_GENDER || chr(10);
    RESULT := RESULT || 'Address : ' || U_ADDRESS || chr(10)||chr(10);

    SELECT COUNT(*) INTO WORK_EXPERIENCE_COUNT
    FROM WORK_EXPERIENCE
    WHERE USER_ID = U_USER_ID;
    IF WORK_EXPERIENCE_COUNT > 0 THEN
        i := 1;
        RESULT :=RESULT|| '---WORK EXPERIENCE---' || chr(10);
        FOR WE IN (SELECT * FROM WORK_EXPERIENCE WHERE USER_ID = U_USER_ID ORDER BY START_DATE DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i ||'. ' || WE.DESIGNATION || ' (' || WE.EMPLOYMENT_TYPE || ')' || chr(10);
            RESULT := RESULT ||'Organization : ' || WE.ORGANIZATION || chr(10);
            RESULT := RESULT || WE.START_DATE || ' - ';
            IF WE.END_DATE IS NULL THEN
                RESULT := RESULT || 'now' || chr(10);
            ELSE RESULT := RESULT || WE.END_DATE || chr(10);
            end if;
            i:= i+1;
        end loop;
        RESULT := RESULT || chr(10);
    end if;

    SELECT COUNT(*) INTO EDUCATION_COUNT
    FROM EDUCATION
    WHERE USER_ID = U_USER_ID;
    IF EDUCATION_COUNT > 0 THEN
        i := 1;
        RESULT := RESULT || '---EDUCATION---' || chr(10);
        FOR E IN (SELECT * FROM EDUCATION WHERE USER_ID = U_USER_ID ORDER BY START_DATE DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i ||'. ' || E.DEGREE || chr(10);
            RESULT := RESULT ||'Institute : '|| E.INSTITUTE || chr(10);
            IF(E.GRADE IS NOT NULL ) THEN
                RESULT := RESULT ||'Grade : '|| E.GRADE || chr(10);
            end if;
            RESULT := RESULT || E.START_DATE || ' - ';
            IF E.END_DATE IS NULL THEN
                RESULT := RESULT || 'now' || chr(10);
            ELSE RESULT := RESULT || E.END_DATE || chr(10);
            end if;
            i:= i+1;
        end loop;
        RESULT := RESULT || chr(10);
    end if;

    SELECT COUNT(*) INTO PUBLICATION_COUNT
    FROM PUBLICATIONS
    WHERE USER_ID = U_USER_ID;
    IF PUBLICATION_COUNT > 0 THEN
        i := 1;
        RESULT := RESULT || '---PUBLICATIONS---' || chr(10);
        FOR P IN (SELECT * FROM PUBLICATIONS WHERE USER_ID = U_USER_ID ORDER BY PUBLICATION_DATE DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i ||'. ' || P.TITLE || chr(10);
            RESULT := RESULT ||'Journal : '|| P.JOURNAL ||' ('||P.PUBLICATION_DATE||')'||chr(10);
            RESULT := RESULT ||'Authors : '|| P.AUTHORS || chr(10);
            i:= i+1;
        end loop;
        RESULT := RESULT || chr(10);
    end if;

    SELECT COUNT(*) INTO ACHIEVEMENT_COUNT
    FROM ACHIEVEMENTS
    WHERE USER_ID = U_USER_ID;
    IF ACHIEVEMENT_COUNT > 0 THEN
        i := 1;
        RESULT := RESULT || '---ACHIEVEMENTS---' || chr(10);
        FOR A IN (SELECT * FROM ACHIEVEMENTS WHERE USER_ID = U_USER_ID ORDER BY ACHIEVEMENT_ID DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i ||'. ' || A.ACHIEVEMENT_NAME ||' ('||A.ACHIEVEMENT_DATE||')'||chr(10);
            IF A.POSITION IS NOT NULL THEN
                RESULT := RESULT ||'Position : '|| A.POSITION || chr(10);
            end if;
            i:= i+1;
        end loop;
        RESULT := RESULT || chr(10);
    end if;

    SELECT COUNT(*) INTO PUBLICATION_COUNT
    FROM PUBLICATIONS
    WHERE USER_ID = U_USER_ID;
    IF PUBLICATION_COUNT > 0 THEN
        i := 1;
        RESULT := RESULT || '---PUBLICATIONS---' || chr(10);
        FOR P IN (SELECT * FROM PUBLICATIONS WHERE USER_ID = U_USER_ID ORDER BY PUBLICATION_DATE DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i ||'. ' || P.TITLE || chr(10);
            RESULT := RESULT ||'Journal : '|| P.JOURNAL ||' ('||P.PUBLICATION_DATE||')'||chr(10);
            RESULT := RESULT ||'Authors : '|| P.AUTHORS || chr(10);
            i:= i+1;
        end loop;
        RESULT := RESULT || chr(10);
    end if;

    SELECT COUNT(*) INTO RESEARCH_INTEREST_COUNT
    FROM RESEARCH_INTERESTS
    WHERE USER_ID = U_USER_ID;
    IF RESEARCH_INTEREST_COUNT > 0 THEN
        i := 1;
        RESULT := RESULT || '---RESEARCH INTEREST---' || chr(10);
        FOR RI IN (SELECT * FROM RESEARCH_INTERESTS WHERE USER_ID = U_USER_ID OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i ||'. ' || RI.RESEARCH_INTEREST ||'   ';
            i:= i+1;
        end loop;
        RESULT := RESULT || chr(10);
    end if;

    SELECT COUNT(*) INTO SKILL_COUNT
    FROM SKILLS
    WHERE USER_ID = U_USER_ID;
    IF SKILL_COUNT > 0 THEN
        i := 1;
        RESULT := RESULT || '---SKILL---' || chr(10);
        FOR S IN (SELECT * FROM SKILLS WHERE USER_ID = U_USER_ID OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i ||'. ' || S.SKILL ||'   ';
            i:= i+1;
        end loop;
        RESULT := RESULT || chr(10);
    end if;

    SELECT COUNT(*) INTO INTEREST_COUNT
    FROM INTERESTS
    WHERE USER_ID = U_USER_ID;
    IF INTEREST_COUNT > 0 THEN
        i := 1;
        RESULT := RESULT || '---INTEREST---' || chr(10);
        FOR INT IN (SELECT * FROM INTERESTS WHERE USER_ID = U_USER_ID OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i ||'. ' || INT.INTEREST ||'   ';
            i:= i+1;
        end loop;
        RESULT := RESULT || chr(10);
    end if;
END;


create OR REPLACE PROCEDURE ADD_MERCH(
    M_USER_ID IN MERCHS.USER_ID%TYPE,
    M_PRODUCT_NAME IN MERCHS.PRODUCT_NAME%TYPE,
    M_IMAGE IN MERCHS.IMAGE%TYPE,
    M_PRICE IN  MERCHS.PRICE%TYPE,
		M_EMAIL IN MERCHS.EMAIL%TYPE,
		M_PHONE_NO IN MERCHS.PHONE_NO%TYPE,
		M_DESCRIPTION IN MERCHS.DESCRIPTION%TYPE,
    RESULT OUT VARCHAR2
) IS
    M_POST_ID MERCHS.POST_ID%TYPE;
BEGIN
    M_POST_ID := POST_SEQ.NEXTVAL;
    INSERT INTO
        POSTS(POST_ID, POST_TYPE)
    VALUES (M_POST_ID, 'merch');

    INSERT INTO MERCHS(POST_ID, USER_ID, PRODUCT_NAME, IMAGE, PRICE, EMAIL, PHONE_NO, DESCRIPTION)
    VALUES (M_POST_ID, M_USER_ID, UPPER(M_PRODUCT_NAME), M_IMAGE, M_PRICE, M_EMAIL, M_PHONE_NO, M_DESCRIPTION);
    RESULT := 'Merch is added';

EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;

create OR REPLACE PROCEDURE UPDATE_MERCH(
    M_POST_ID IN MERCHS.POST_ID%TYPE,
    M_PRODUCT_NAME IN MERCHS.PRODUCT_NAME%TYPE,
    M_IMAGE IN MERCHS.IMAGE%TYPE,
    M_PRICE IN  MERCHS.PRICE%TYPE,
		M_EMAIL IN MERCHS.EMAIL%TYPE,
		M_PHONE_NO IN MERCHS.PHONE_NO%TYPE,
		M_DESCRIPTION IN MERCHS.DESCRIPTION%TYPE,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE MERCHS
        SET
            PRODUCT_NAME = UPPER(M_PRODUCT_NAME),
						IMAGE = M_IMAGE,
						PRICE = M_PRICE,
						EMAIL = M_EMAIL,
						PHONE_NO = M_PHONE_NO,
						DESCRIPTION = M_DESCRIPTION
    WHERE POST_ID = M_POST_ID;
    RESULT := 'Update is successful';
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;