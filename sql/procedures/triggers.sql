CREATE OR REPLACE TRIGGER WELCOME_USER_NOTIFICATION
AFTER INSERT
ON USERS
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, :NEW.USER_ID, 'USERS', :NEW.USER_ID, 'Welcome to ALUMNET. Click here to add info inb your profile...', '/api/users/edit','NO');
end;

-----------------------------

CREATE OR REPLACE TRIGGER FOLLOW_USER_NOTIFICATION
AFTER INSERT
ON FOLLOWS
FOR EACH ROW
DECLARE
    U_USER_NAME VARCHAR2(100);
BEGIN
    SELECT FIRST_NAME || ' ' || LAST_NAME INTO  U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.FOLLOWER;

    INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, :NEW.FOLLOWING, 'FOLLOWS', :NEW.FOLLOWER , U_USER_NAME || ' has started to following you. Visit profile.', '/api/users/' ||:NEW.FOLLOWER,'NO');
end;

CREATE OR REPLACE TRIGGER FOLLOW_USER_NOTIFICATION_REMOVE
AFTER DELETE
ON FOLLOWS
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
        WHERE ENTITY_NAME = 'FOLLOWS'
        AND ENTITY_ID = :OLD.FOLLOWER
        AND USER_ID = :OLD.FOLLOWING;
end;

-----------------------------

CREATE OR REPLACE TRIGGER PENDING_MEMBER_NOTIFICATION
AFTER INSERT
ON PENDING_MEMBERS
FOR EACH ROW
DECLARE
    U_USER_NAME VARCHAR2(100);
    G_GROUP_NAME VARCHAR2(100);
    G_ADMIN_ID NUMBER;
BEGIN
    SELECT FIRST_NAME || ' ' || LAST_NAME INTO  U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    SELECT ADMIN_ID INTO G_ADMIN_ID
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, G_ADMIN_ID , 'PENDING_MEMBERS', :NEW.PENDING_MEMBER_ID , U_USER_NAME || ' wants to join ' || G_GROUP_NAME, '/api/group_member/pending/group/' || :NEW.GROUP_ID ,'NO');
end;

CREATE OR REPLACE TRIGGER PENDING_MEMBER_NOTIFICATION_REMOVE
AFTER DELETE
ON PENDING_MEMBERS
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
        WHERE ENTITY_ID = :OLD.PENDING_MEMBER_ID AND ENTITY_NAME = 'PENDING_MEMBERS';
end;

-----------------------------

CREATE OR REPLACE TRIGGER GROUP_MEMBER_NOTIFICATION
AFTER INSERT
ON GROUP_MEMBERS
FOR EACH ROW
DECLARE
    G_GROUP_NAME VARCHAR2(100);
BEGIN
    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, :NEW.USER_ID , 'GROUP_MEMBERS', :NEW.GROUP_MEMBER_ID ,'Your join request in ' || G_GROUP_NAME || ' group is accepted',
            '/api/group/' || :NEW.GROUP_ID ,'NO');
end;

CREATE OR REPLACE TRIGGER GROUP_MEMBER_NOTIFICATION_REMOVE
AFTER DELETE
ON GROUP_MEMBERS
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
        WHERE ENTITY_ID = :OLD.GROUP_MEMBER_ID AND ENTITY_NAME = 'GROUP_MEMBERS';
end;

-----------------------------

CREATE OR REPLACE TRIGGER MAKE_ADMIN_NOTIFICATION
AFTER UPDATE
OF ADMIN_ID
ON GROUPS
FOR EACH ROW
DECLARE
BEGIN

    INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, :NEW.ADMIN_ID , 'GROUPS', :NEW.ADMIN_ID ,'You are the admin of ' || :NEW.GROUP_NAME || ' group now',
            '/api/group/' || :NEW.GROUP_ID ,'NO');

end;

-----------------------------

CREATE OR REPLACE TRIGGER GROUP_POST_NOTIFICATION
AFTER INSERT
ON GROUP_POSTS
FOR EACH ROW
DECLARE
    G_GROUP_NAME VARCHAR2(100);
BEGIN

    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    FOR GM IN (SELECT * FROM GROUP_MEMBERS WHERE GROUP_ID = :NEW.GROUP_ID)
    LOOP
        IF GM.USER_ID <> :NEW.USER_ID THEN
            INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
                VALUES (NOTIFICATION_SEQ.nextval, GM.USER_ID , 'POSTS', :NEW.POST_ID ,'There is new post in' || G_GROUP_NAME || ' group',
            '/api/group/group_post/' || :NEW.POST_ID ,'NO');
        end if;
    end loop;

end;


CREATE OR REPLACE TRIGGER BLOG_NOTIFICATION
AFTER INSERT
ON BLOGS
FOR EACH ROW
DECLARE
    U_USER_NAME VARCHAR2(100);
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    FOR F IN (SELECT * FROM FOLLOWS WHERE FOLLOWING = :NEW.USER_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, F.FOLLOWER , 'POSTS', :NEW.POST_ID ,U_USER_NAME ||' has posted a blog.',
            '/api/group/blog/' || :NEW.POST_ID ,'NO');
    end loop;

end;

CREATE OR REPLACE TRIGGER JOB_POST_NOTIFICATION
AFTER INSERT
ON JOB_POSTS
FOR EACH ROW
DECLARE
    U_USER_NAME VARCHAR2(100);
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    FOR F IN (SELECT * FROM FOLLOWS WHERE FOLLOWING = :NEW.USER_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, F.FOLLOWER , 'POSTS', :NEW.POST_ID ,U_USER_NAME ||' has posted a job post.',
            '/api/group/job_post/' || :NEW.POST_ID ,'NO');
    end loop;
end;


CREATE OR REPLACE TRIGGER MERCH_NOTIFICATION
AFTER INSERT
ON MERCHS
FOR EACH ROW
DECLARE
    U_USER_NAME VARCHAR2(100);
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    FOR F IN (SELECT * FROM FOLLOWS WHERE FOLLOWING = :NEW.USER_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, F.FOLLOWER , 'POSTS', :NEW.POST_ID ,U_USER_NAME ||' has posted a merchandise.',
            '/api/group/merch/' || :NEW.POST_ID ,'NO');
    end loop;
end;


CREATE OR REPLACE TRIGGER POST_NOTIFICATION_REMOVE
AFTER DELETE
ON POSTS
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
    WHERE ENTITY_NAME = 'POSTS' AND ENTITY_ID = :OLD.POST_ID;
end;


CREATE OR REPLACE TRIGGER LIKE_NOTIFICATION
AFTER INSERT
ON LIKES
FOR EACH ROW
DECLARE
    U_USER_NAME VARCHAR2(100);
    P_USER_ID NUMBER;
    P_POST_TYPE VARCHAR2(100);
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    SELECT POST_TYPE INTO P_POST_TYPE
    FROM POSTS
    WHERE POST_ID = :NEW.POST_ID;

    IF P_POST_TYPE = 'blog' THEN
        SELECT B.USER_ID INTO P_USER_ID FROM BLOGS B
        WHERE B.POST_ID = :NEW.post_id;
    ELSIF P_POST_TYPE = 'job_post' THEN
        SELECT JP.USER_ID INTO P_USER_ID FROM JOB_POSTS JP
        WHERE JP.POST_ID = :NEW.post_id;
    ELSIF P_POST_TYPE = 'merch' THEN
        SELECT M.USER_ID INTO P_USER_ID FROM MERCHS M
        WHERE M.POST_ID = :NEW.post_id;
    ELSE
        SELECT GM.USER_ID INTO P_USER_ID FROM GROUP_POSTS GP
        JOIN GROUP_MEMBERS GM ON GM.GROUP_MEMBER_ID = GP.GROUP_MEMBER_ID
        WHERE GP.POST_ID = :NEW.post_id;
    end if;
    IF P_USER_ID <> :NEW.USER_ID THEN
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, P_USER_ID , 'LIKES', :NEW.LIKE_ID , U_USER_NAME ||' has liked your post',
            '/api/group/' || P_POST_TYPE || '/'|| :NEW.POST_ID ,'NO');
    end if;
end;

CREATE OR REPLACE TRIGGER LIKE_NOTIFICATION_REMOVE
AFTER DELETE
ON LIKES
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
    WHERE ENTITY_NAME = 'LIKES' AND ENTITY_ID = :OLD.LIKE_ID;
end;

CREATE OR REPLACE TRIGGER COMMENT_NOTIFICATION
AFTER INSERT
ON COMMENTS
FOR EACH ROW
DECLARE
    U_USER_NAME VARCHAR2(100);
    P_USER_ID NUMBER;
    P_POST_TYPE VARCHAR2(100);
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    SELECT POST_TYPE INTO P_POST_TYPE
    FROM POSTS
    WHERE POST_ID = :NEW.POST_ID;

    IF P_POST_TYPE = 'blog' THEN
        SELECT B.USER_ID INTO P_USER_ID FROM BLOGS B
        WHERE B.POST_ID = :NEW.post_id;
    ELSIF P_POST_TYPE = 'job_post' THEN
        SELECT JP.USER_ID INTO P_USER_ID FROM JOB_POSTS JP
        WHERE JP.POST_ID = :NEW.post_id;
    ELSIF P_POST_TYPE = 'merch' THEN
        SELECT M.USER_ID INTO P_USER_ID FROM MERCHS M
        WHERE M.POST_ID = :NEW.post_id;
    ELSE
        SELECT GM.USER_ID INTO P_USER_ID FROM GROUP_POSTS GP
        JOIN GROUP_MEMBERS GM ON GM.GROUP_MEMBER_ID = GP.GROUP_MEMBER_ID
        WHERE GP.POST_ID = :NEW.post_id;
    end if;
    IF P_USER_ID <> :NEW.USER_ID THEN
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, P_USER_ID , 'COMMENTS', :NEW.COMMENT_ID , U_USER_NAME ||' has commented on your post',
            '/api/group/' || P_POST_TYPE || '/'|| :NEW.POST_ID ,'NO');
    end if;

end;

CREATE OR REPLACE TRIGGER COMMENT_NOTIFICATION_REMOVE
AFTER DELETE
ON COMMENTS
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
    WHERE ENTITY_NAME = 'COMMENTS' AND ENTITY_ID = :OLD.COMMENT_ID;
end;

------------------------------------------------

CREATE OR REPLACE TRIGGER CO_CURRICULAR_NOTIFICATION
AFTER INSERT
ON CO_CURRICULARS
FOR EACH ROW
DECLARE
    G_GROUP_NAME VARCHAR2(1000);
BEGIN

    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    FOR GM IN (SELECT * FROM GROUP_MEMBERS WHERE GROUP_MEMBERS.GROUP_ID = :NEW.GROUP_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, GM.USER_ID , 'EVENTS', :NEW.EVENT_ID , G_GROUP_NAME ||' group is arranging a co-curricular event',
            '/api/group/co_curricular/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;

CREATE OR REPLACE TRIGGER CO_CURRICULAR_UPDATE_NOTIFICATION
AFTER UPDATE
ON CO_CURRICULARS
FOR EACH ROW
DECLARE
BEGIN

    FOR EP IN (SELECT * FROM EVENT_PARTICIPANTS WHERE EVENT_ID = :NEW.EVENT_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, EP.USER_ID , 'EVENT_PARTICIPANTS', :NEW.EVENT_ID , :NEW.EVENT_NAME ||' event has updated',
            '/api/group/co_curricular/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;

CREATE OR REPLACE TRIGGER REUNION_NOTIFICATION
AFTER INSERT
ON REUNIONS
FOR EACH ROW
DECLARE
    G_GROUP_NAME VARCHAR2(1000);
BEGIN

    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    FOR GM IN (SELECT * FROM GROUP_MEMBERS WHERE GROUP_MEMBERS.GROUP_ID = :NEW.GROUP_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, GM.USER_ID , 'EVENTS', :NEW.EVENT_ID , G_GROUP_NAME ||' group is arranging a reunion',
            '/api/group/reunion/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;

CREATE OR REPLACE TRIGGER REUNION_UPDATE_NOTIFICATION
AFTER UPDATE
ON REUNIONS
FOR EACH ROW
DECLARE
BEGIN

    FOR EP IN (SELECT * FROM EVENT_PARTICIPANTS WHERE EVENT_ID = :NEW.EVENT_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, EP.USER_ID , 'EVENT_PARTICIPANTS', :NEW.EVENT_ID , :NEW.EVENT_NAME ||' event has updated',
            '/api/group/reunion/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;

CREATE OR REPLACE TRIGGER SEMINAR_NOTIFICATION
AFTER INSERT
ON SEMINARS
FOR EACH ROW
DECLARE
    G_GROUP_NAME VARCHAR2(1000);
BEGIN

    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    FOR GM IN (SELECT * FROM GROUP_MEMBERS WHERE GROUP_MEMBERS.GROUP_ID = :NEW.GROUP_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, GM.USER_ID , 'EVENTS', :NEW.EVENT_ID , G_GROUP_NAME ||' group is arranging seminar',
            '/api/group/seminar/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;

CREATE OR REPLACE TRIGGER SEMINAR_UPDATE_NOTIFICATION
AFTER UPDATE
ON SEMINARS
FOR EACH ROW
DECLARE
BEGIN

    FOR EP IN (SELECT * FROM EVENT_PARTICIPANTS WHERE EVENT_ID = :NEW.EVENT_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, EP.USER_ID , 'EVENT_PARTICIPANTS', :NEW.EVENT_ID , :NEW.EVENT_NAME ||' event has updated',
            '/api/group/seminar/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;


CREATE OR REPLACE TRIGGER SCHEDULE_NOTIFICATION
AFTER INSERT OR UPDATE
ON SCHEDULES
FOR EACH ROW
DECLARE
    E_EVENT_TYPE VARCHAR2(1000);
BEGIN

    SELECT EVENT_TYPE INTO E_EVENT_TYPE
    FROM EVENTS
    WHERE EVENTS.EVENT_ID = :NEW.EVENT_ID;

    FOR EP IN (SELECT * FROM EVENT_PARTICIPANTS WHERE EVENT_ID = :NEW.EVENT_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, EP.USER_ID , 'EVENT_PARTICIPANTS', :NEW.EVENT_ID , 'An event that you are going has updated',
            '/api/group/'|| E_EVENT_TYPE ||'/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;

CREATE OR REPLACE TRIGGER EVENT_NOTIFICATION_REMOVE
AFTER DELETE
ON EVENTS
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
    WHERE ENTITY_NAME = 'EVENTS' AND ENTITY_ID = :OLD.EVENT_ID;
end;

CREATE OR REPLACE TRIGGER EVENT_PARTICIPANT_NOTIFICATION_REMOVE
AFTER DELETE
ON EVENT_PARTICIPANTS
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
    WHERE ENTITY_NAME = 'EVENT_PARTICIPANTS' AND ENTITY_ID = :OLD.EVENT_ID;
end;



